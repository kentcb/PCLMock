namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Mock : global::PCLMock.MockBase<global::ISimpleInterface>, global::ISimpleInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public System.Int32 GetProperty
        {
            get
            {
                return this.Apply(x => x.GetProperty);
            }
        }

        public System.Int32 GetSetProperty
        {
            get
            {
                return this.Apply(x => x.GetSetProperty);
            }

            set
            {
                this.ApplyPropertySet(x => x.GetSetProperty, value);
            }
        }

        public void VoidMethod()
        {
            this.Apply(x => x.VoidMethod());
        }

        public void VoidMethodWithArguments(System.Int32 i, System.String s)
        {
            this.Apply(x => x.VoidMethodWithArguments(i, s));
        }

        public System.String NonVoidMethod()
        {
            return this.Apply(x => x.NonVoidMethod());
        }

        public System.String NonVoidMethodWithArguments(System.Int32 i, System.String s)
        {
            return this.Apply(x => x.NonVoidMethodWithArguments(i, s));
        }
    }
}