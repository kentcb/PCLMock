namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Reactive.Disposables.Disposable.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Reactive.Disposables.Disposable.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Reactive.Disposables.Disposable.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.IDisposable SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.IDisposable SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.IDisposable SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.IDisposable SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.IDisposable SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomDisposable SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomDisposable SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::ICustomDisposable SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}