// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<TKey, TValue> : global::PCLMock.MockBase<global::ICustomImmutableDictionary<TKey, TValue>>, global::ICustomImmutableDictionary<TKey, TValue>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Clear()).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.Add(global::PCLMock.It.IsAny<TKey>(), global::PCLMock.It.IsAny<TValue>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.AddRange(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<TKey, TValue>>>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.SetItem(global::PCLMock.It.IsAny<TKey>(), global::PCLMock.It.IsAny<TValue>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.SetItems(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<TKey, TValue>>>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.RemoveRange(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<TKey>>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.Remove(global::PCLMock.It.IsAny<TKey>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> Clear()
        {
            return this.Apply(x => x.Clear());
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> Add(TKey key, TValue value)
        {
            return this.Apply(x => x.Add(key, value));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> AddRange(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> pairs)
        {
            return this.Apply(x => x.AddRange(pairs));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> SetItem(TKey key, TValue value)
        {
            return this.Apply(x => x.SetItem(key, value));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> SetItems(global::System.Collections.Generic.IEnumerable<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> items)
        {
            return this.Apply(x => x.SetItems(items));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> RemoveRange(global::System.Collections.Generic.IEnumerable<TKey> keys)
        {
            return this.Apply(x => x.RemoveRange(keys));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> Remove(TKey key)
        {
            return this.Apply(x => x.Remove(key));
        }

        public System.Boolean Contains(global::System.Collections.Generic.KeyValuePair<TKey, TValue> pair)
        {
            return this.Apply(x => x.Contains(pair));
        }

        public System.Boolean TryGetKey(TKey equalKey, out TKey actualKey)
        {
            TKey _actualKey;
            actualKey = (this.GetOutParameterValue<TKey>(x => x.TryGetKey(equalKey, out _actualKey), 1));
            return this.Apply(x => x.TryGetKey(equalKey, out _actualKey));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableDictionary<System.Int32, System.String>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableDictionary<System.Int32, System.String>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableDictionary<System.Int32, System.String>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableDictionary<System.Int32, System.String> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableDictionary<System.Int32, System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableDictionary<System.Int32, System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Immutable.IImmutableDictionary<System.Int32, System.String> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Immutable.IImmutableDictionary<System.Int32, T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomImmutableDictionary<System.Int32, System.String> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomImmutableDictionary<System.Int32, System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::ICustomImmutableDictionary<System.Int32, System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<TKey, TValue> : global::PCLMock.MockBase<global::ISomeGenericInterface<TKey, TValue>>, global::ISomeGenericInterface<TKey, TValue>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableDictionary<TKey, TValue>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableDictionary<TKey, TValue> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
