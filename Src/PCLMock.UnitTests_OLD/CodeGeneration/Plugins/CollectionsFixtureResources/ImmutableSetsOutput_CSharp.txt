// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<T> : global::PCLMock.MockBase<global::ICustomImmutableSet<T>>, global::ICustomImmutableSet<T>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Clear()).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.Add(global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.Remove(global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.Intersect(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.Except(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.SymmetricExcept(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.Union(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableSet<T> Clear()
        {
            return this.Apply(x => x.Clear());
        }

        public System.Boolean Contains(T value)
        {
            return this.Apply(x => x.Contains(value));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> Add(T value)
        {
            return this.Apply(x => x.Add(value));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> Remove(T value)
        {
            return this.Apply(x => x.Remove(value));
        }

        public System.Boolean TryGetValue(T equalValue, out T actualValue)
        {
            T _actualValue;
            actualValue = (this.GetOutParameterValue<T>(x => x.TryGetValue(equalValue, out _actualValue), 1));
            return this.Apply(x => x.TryGetValue(equalValue, out _actualValue));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> Intersect(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.Intersect(other));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> Except(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.Except(other));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> SymmetricExcept(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.SymmetricExcept(other));
        }

        public global::System.Collections.Immutable.IImmutableSet<T> Union(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.Union(other));
        }

        public System.Boolean SetEquals(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.SetEquals(other));
        }

        public System.Boolean IsProperSubsetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsProperSubsetOf(other));
        }

        public System.Boolean IsProperSupersetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsProperSupersetOf(other));
        }

        public System.Boolean IsSubsetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsSubsetOf(other));
        }

        public System.Boolean IsSupersetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsSupersetOf(other));
        }

        public System.Boolean Overlaps(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.Overlaps(other));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableHashSet<System.Int32>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableHashSet<System.String>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableHashSet<System.String>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableSet<System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableSet<System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableSet<System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Immutable.IImmutableSet<System.Int32> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Immutable.IImmutableSet<T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public ICustomIImmutableSet<System.Int32> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public ICustomIImmutableSet<System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public ICustomIImmutableSet<System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<T> : global::PCLMock.MockBase<global::ISomeGenericInterface<T>>, global::ISomeGenericInterface<T>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableHashSet<T>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableSet<T> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableSet<T> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableSet<T> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
