// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<T> : global::PCLMock.MockBase<global::ICustomImmutableList<T>>, global::ICustomImmutableList<T>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Clear()).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.Add(global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.AddRange(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.Insert(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.InsertRange(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.Remove(global::PCLMock.It.IsAny<T>(), global::PCLMock.It.IsAny<global::System.Collections.Generic.IEqualityComparer<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.RemoveAll(global::PCLMock.It.IsAny<global::System.Predicate<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.RemoveRange(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>(), global::PCLMock.It.IsAny<global::System.Collections.Generic.IEqualityComparer<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.RemoveRange(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Int32>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.RemoveAt(global::PCLMock.It.IsAny<System.Int32>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.SetItem(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.Replace(global::PCLMock.It.IsAny<T>(), global::PCLMock.It.IsAny<T>(), global::PCLMock.It.IsAny<global::System.Collections.Generic.IEqualityComparer<T>>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableList<T> Clear()
        {
            return this.Apply(x => x.Clear());
        }

        public System.Int32 IndexOf(T item, System.Int32 index, System.Int32 count, global::System.Collections.Generic.IEqualityComparer<T> equalityComparer)
        {
            return this.Apply(x => x.IndexOf(item, index, count, equalityComparer));
        }

        public System.Int32 LastIndexOf(T item, System.Int32 index, System.Int32 count, global::System.Collections.Generic.IEqualityComparer<T> equalityComparer)
        {
            return this.Apply(x => x.LastIndexOf(item, index, count, equalityComparer));
        }

        public global::System.Collections.Immutable.IImmutableList<T> Add(T value)
        {
            return this.Apply(x => x.Add(value));
        }

        public global::System.Collections.Immutable.IImmutableList<T> AddRange(global::System.Collections.Generic.IEnumerable<T> items)
        {
            return this.Apply(x => x.AddRange(items));
        }

        public global::System.Collections.Immutable.IImmutableList<T> Insert(System.Int32 index, T element)
        {
            return this.Apply(x => x.Insert(index, element));
        }

        public global::System.Collections.Immutable.IImmutableList<T> InsertRange(System.Int32 index, global::System.Collections.Generic.IEnumerable<T> items)
        {
            return this.Apply(x => x.InsertRange(index, items));
        }

        public global::System.Collections.Immutable.IImmutableList<T> Remove(T value, global::System.Collections.Generic.IEqualityComparer<T> equalityComparer)
        {
            return this.Apply(x => x.Remove(value, equalityComparer));
        }

        public global::System.Collections.Immutable.IImmutableList<T> RemoveAll(global::System.Predicate<T> match)
        {
            return this.Apply(x => x.RemoveAll(match));
        }

        public global::System.Collections.Immutable.IImmutableList<T> RemoveRange(global::System.Collections.Generic.IEnumerable<T> items, global::System.Collections.Generic.IEqualityComparer<T> equalityComparer)
        {
            return this.Apply(x => x.RemoveRange(items, equalityComparer));
        }

        public global::System.Collections.Immutable.IImmutableList<T> RemoveRange(System.Int32 index, System.Int32 count)
        {
            return this.Apply(x => x.RemoveRange(index, count));
        }

        public global::System.Collections.Immutable.IImmutableList<T> RemoveAt(System.Int32 index)
        {
            return this.Apply(x => x.RemoveAt(index));
        }

        public global::System.Collections.Immutable.IImmutableList<T> SetItem(System.Int32 index, T value)
        {
            return this.Apply(x => x.SetItem(index, value));
        }

        public global::System.Collections.Immutable.IImmutableList<T> Replace(T oldValue, T newValue, global::System.Collections.Generic.IEqualityComparer<T> equalityComparer)
        {
            return this.Apply(x => x.Replace(oldValue, newValue, equalityComparer));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableList<System.Int32>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableList<System.String>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableList<System.String>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableList<System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableList<System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableList<System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Immutable.IImmutableList<System.Int32> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Immutable.IImmutableList<T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public ICustomIImmutableList<System.Int32> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public ICustomIImmutableList<System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public ICustomIImmutableList<System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<T> : global::PCLMock.MockBase<global::ISomeGenericInterface<T>>, global::ISomeGenericInterface<T>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(global::System.Collections.Immutable.ImmutableList<T>.Empty);
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableList<T> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableList<T> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableList<T> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
