using System;
using System.Collections.Immutable;

interface ICustomImmutableDictionary<TKey, TValue> : IImmutableDictionary<TKey, TValue>
{
}

interface ISomeInterface
{
	IImmutableDictionary<int, string> SomeProperty
	{
		get;
	}

	// expecting this to be ignored because it's set-only
	IImmutableDictionary<int, string> SomeSetOnlyProperty
	{
		set;
	}

	IImmutableDictionary<int, string> SomeMethod();
	IImmutableDictionary<int, string> SomeMethod(int i, float f);

	// should all be ignored because they're generic
	IImmutableDictionary<int, string> SomeGenericMethod<T>();
	IImmutableDictionary<int, T> SomeOtherGenericMethod<T>();

	// should be ignored because they're a custom enumerable type
	ICustomImmutableDictionary<int, string> SomeCustomProperty
	{
		get;
	}

	ICustomImmutableDictionary<int, string> SomeMethod();
	ICustomImmutableDictionary<int, string> SomeMethod(int i, float f);
}

interface ISomeGenericInterface<TKey, TValue>
{
	IImmutableDictionary<TKey, TValue> SomeProperty
	{
		get;
	}

	IImmutableDictionary<TKey, TValue> SomeMethod();
	IImmutableDictionary<TKey, TValue> SomeMethod(int i, float f);
}