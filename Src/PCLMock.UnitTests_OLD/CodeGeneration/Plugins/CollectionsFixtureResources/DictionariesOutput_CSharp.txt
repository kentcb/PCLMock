// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<TKey, TValue> : global::PCLMock.MockBase<global::ICustomDictionary<TKey, TValue>>, global::ICustomDictionary<TKey, TValue>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Keys).Return(new global::System.Collections.Generic.List<TKey>());
            this.When(x => x.Values).Return(new global::System.Collections.Generic.List<TValue>());
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public System.Boolean ContainsKey(TKey key)
        {
            return this.Apply(x => x.ContainsKey(key));
        }

        public void Add(TKey key, TValue value)
        {
            this.Apply(x => x.Add(key, value));
        }

        public System.Boolean Remove(TKey key)
        {
            return this.Apply(x => x.Remove(key));
        }

        public System.Boolean TryGetValue(TKey key, out TValue value)
        {
            TValue _value;
            value = (this.GetOutParameterValue<TValue>(x => x.TryGetValue(key, out _value), 1));
            return this.Apply(x => x.TryGetValue(key, out _value));
        }

        public TValue this[TKey key]
        {
            get
            {
                return this.Apply(x => x[key]);
            }

            set
            {
                this.ApplyPropertySet(x => x[key], value);
            }
        }

        public global::System.Collections.Generic.ICollection<TKey> Keys
        {
            get
            {
                return this.Apply(x => x.Keys);
            }
        }

        public global::System.Collections.Generic.ICollection<TValue> Values
        {
            get
            {
                return this.Apply(x => x.Values);
            }
        }

        public void Add(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            this.Apply(x => x.Add(item));
        }

        public void Clear()
        {
            this.Apply(x => x.Clear());
        }

        public System.Boolean Contains(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            return this.Apply(x => x.Contains(item));
        }

        public void CopyTo(global::System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, System.Int32 arrayIndex)
        {
            this.Apply(x => x.CopyTo(array, arrayIndex));
        }

        public System.Boolean Remove(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            return this.Apply(x => x.Remove(item));
        }

        public System.Int32 Count
        {
            get
            {
                return this.Apply(x => x.Count);
            }
        }

        public System.Boolean IsReadOnly
        {
            get
            {
                return this.Apply(x => x.IsReadOnly);
            }
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.Dictionary<System.Int32, System.String>());
            this.When(x => x.SomeReadOnlyProperty).Return(new global::System.Collections.Generic.Dictionary<System.Int32, System.String>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.Dictionary<System.Int32, System.String>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(new global::System.Collections.Generic.Dictionary<System.Int32, System.String>());
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IDictionary<System.Int32, System.String> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.IReadOnlyDictionary<System.Int32, System.String> SomeReadOnlyProperty
        {
            get
            {
                return this.Apply(x => x.SomeReadOnlyProperty);
            }
        }

        public global::System.Collections.Generic.IDictionary<System.Int32, System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.IDictionary<System.Int32, System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Generic.IDictionary<System.Int32, System.String> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Generic.IDictionary<System.Int32, T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomDictionary<System.Int32, System.String> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomDictionary<System.Int32, System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::ICustomDictionary<System.Int32, System.String> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock<TKey, TValue> : global::PCLMock.MockBase<global::ISomeGenericInterface<TKey, TValue>>, global::ISomeGenericInterface<TKey, TValue>
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>())).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeMethod(System.Int32 i, System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
