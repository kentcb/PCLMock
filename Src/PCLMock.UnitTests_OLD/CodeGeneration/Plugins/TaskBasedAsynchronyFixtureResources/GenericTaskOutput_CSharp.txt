namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base (behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Threading.Tasks.Task.FromResult<System.Int32>(0));
            this.When(x => x.SomeOtherProperty).Return(global::System.Threading.Tasks.Task.FromResult<System.String>(null));
            this.When(x => x[global::PCLMock.It.IsAny<System.Int32>(), global::PCLMock.It.IsAny<System.Single>()]).Return(global::System.Threading.Tasks.Task.FromResult<System.Int32>(0));
            this.When(x => x.SomeMethod()).Return(global::System.Threading.Tasks.Task.FromResult<System.Int32>(0));
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<System.String>(), global::PCLMock.It.IsAny<System.Int32>())).Return(global::System.Threading.Tasks.Task.FromResult<System.String>(null));
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Threading.Tasks.Task<System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Threading.Tasks.Task<System.String> SomeOtherProperty
        {
            get
            {
                return this.Apply(x => x.SomeOtherProperty);
            }
        }

        public global::System.Threading.Tasks.Task<System.Int32> this[System.Int32 i, System.Single f]
        {
            get
            {
                return this.Apply(x => x[i, f]);
            }
        }

        public global::System.Threading.Tasks.Task<System.Int32> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Threading.Tasks.Task<System.String> SomeMethod(System.String s, System.Int32 i)
        {
            return this.Apply(x => x.SomeMethod(s, i));
        }

        public global::System.Threading.Tasks.Task<System.Int32> SomeMethod<T>()
        {
            return this.Apply(x => x.SomeMethod<T>());
        }

        public global::System.Threading.Tasks.Task<System.Int32> SomeMethod<T1, T2>()
        {
            return this.Apply(x => x.SomeMethod<T1, T2>());
        }

        public global::CustomTask<System.Int32> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::CustomTask<System.String> SomeMethod(System.String s, System.Int32 i)
        {
            return this.Apply(x => x.SomeMethod(s, i));
        }
    }
}