using System.Threading.Tasks;

class CustomTask<T> : Task<T>
{
}

interface ISomeInterface
{
	Task<int> SomeProperty
	{
		get;
	}

	Task<string> SomeOtherProperty
	{
		get;
	}

	// expecting this to be ignored because it's set-only
	Task<int> SomeSetOnlyProperty
	{
		set;
	}

	Task<int> this[int i, float f]
	{
		get;
	}

    Task<int> SomeMethod();
	Task<string> SomeMethod(string s, int i);

	// expecting these to be ignored because of the type parameters
	Task<int> SomeMethod<T>();
	Task<int> SomeMethod<T1, T2>();

	// expecting these two to be ignored because of it being a custom task (which we have no way of providing a default value for)
    CustomTask<int> SomeMethod();
	CustomTask<string> SomeMethod(string s, int i);
}