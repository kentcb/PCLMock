// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x[global::PCLMock.It.IsAny<global::System.Int32>()]).Return((global::System.Int32)(default));
            this.When(x => x[global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>()]).Return((global::System.String)(default));
            this.When(x => x[global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>(), global::PCLMock.It.IsAny<global::System.Double>()]).Return((global::System.String)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Int32 this[global::System.Int32 i]
        {
            get
            {
                return this.Apply(x => x[i]);
            }
        }

        global::System.String global::ISomeInterface.this[global::System.Int32 i, global::System.Single j]
        {
            get
            {
                return this.Apply(x => x[i, j]);
            }
        }

        global::System.String global::ISomeInterface.this[global::System.Int32 i, global::System.Single j, global::System.Double d]
        {
            get
            {
                return this.Apply(x => x[i, j, d]);
            }

            set
            {
                this.ApplyPropertySet(x => x[i, j, d], value);
            }
        }
    }
}
