namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class Mock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public Mock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehaviorGenerated();
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
        }

        private void ConfigureLooseBehaviorGenerated()
        {
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public void SomeMethod(out global::System.Int32 i)
        {
            global::System.Int32 _i;
            i = (this.GetOutParameterValue<global::System.Int32>(x => x.SomeMethod(out _i), 0));
            this.Apply(x => x.SomeMethod(out _i));
        }

        public void SomeMethod(out global::System.Double d, global::System.Int32 i)
        {
            global::System.Double _d;
            d = (this.GetOutParameterValue<global::System.Double>(x => x.SomeMethod(out _d, i), 0));
            this.Apply(x => x.SomeMethod(out _d, i));
        }

        public void SomeMethod(global::System.Int32 i, out global::System.Double d)
        {
            global::System.Double _d;
            d = (this.GetOutParameterValue<global::System.Double>(x => x.SomeMethod(i, out _d), 1));
            this.Apply(x => x.SomeMethod(i, out _d));
        }

        public void SomeMethod(ref global::System.Int32 i, out global::System.String s)
        {
            var _i = default(global::System.Int32);
            global::System.String _s;
            i = (this.GetRefParameterValue<global::System.Int32>(x => x.SomeMethod(ref _i, out _s), 0));
            s = (this.GetOutParameterValue<global::System.String>(x => x.SomeMethod(ref _i, out _s), 1));
            this.Apply(x => x.SomeMethod(ref _i, out _s));
        }

        public void SomeMethod(ref global::System.Int32 i, out global::System.String s, global::System.Double d)
        {
            var _i = default(global::System.Int32);
            global::System.String _s;
            i = (this.GetRefParameterValue<global::System.Int32>(x => x.SomeMethod(ref _i, out _s, d), 0));
            s = (this.GetOutParameterValue<global::System.String>(x => x.SomeMethod(ref _i, out _s, d), 1));
            this.Apply(x => x.SomeMethod(ref _i, out _s, d));
        }
    }
}