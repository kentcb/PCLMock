// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class IFirstInterfaceMock : global::PCLMock.MockBase<global::IFirstInterface>, global::IFirstInterface
    {
        public IFirstInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.DuplicateProperty).Return((global::System.Int32)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public void FirstMethod()
        {
            this.Apply(x => x.FirstMethod());
        }

        public global::System.Int32 DuplicateProperty
        {
            get
            {
                return this.Apply(x => x.DuplicateProperty);
            }
        }

        public void DuplicateMethod()
        {
            this.Apply(x => x.DuplicateMethod());
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ISecondInterfaceMock : global::PCLMock.MockBase<global::ISecondInterface>, global::ISecondInterface
    {
        public ISecondInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.DuplicateProperty).Return((global::System.Int32)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public void SecondMethod()
        {
            this.Apply(x => x.SecondMethod());
        }

        public global::System.Int32 DuplicateProperty
        {
            get
            {
                return this.Apply(x => x.DuplicateProperty);
            }
        }

        public void DuplicateMethod()
        {
            this.Apply(x => x.DuplicateMethod());
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class IThirdInterfaceMock : global::PCLMock.MockBase<global::IThirdInterface>, global::IThirdInterface
    {
        public IThirdInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.DuplicateProperty).Return((global::System.Int32)(default));
            this.When(x => x.DuplicateProperty).Return((global::System.Int32)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public void FirstMethod()
        {
            this.Apply(x => x.FirstMethod());
        }

        public global::System.Int32 DuplicateProperty
        {
            get
            {
                return this.Apply(x => x.DuplicateProperty);
            }
        }

        public void DuplicateMethod()
        {
            this.Apply(x => x.DuplicateMethod());
        }

        public void SecondMethod()
        {
            this.Apply(x => x.SecondMethod());
        }

        global::System.Int32 global::ISecondInterface.DuplicateProperty
        {
            get
            {
                return this.Apply(x => x.DuplicateProperty);
            }
        }

        void global::ISecondInterface.DuplicateMethod()
        {
            this.Apply(x => ((global::ISecondInterface)(x)).DuplicateMethod());
        }
    }
}
