// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    public partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(_x => _x[global::PCLMock.It.IsAny<global::System.Int32>()]).Return((global::System.Int32)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Int32 this[global::System.Int32 x]
        {
            get
            {
                return this.Apply(_x => _x[x]);
            }

            set
            {
                this.ApplyPropertySet(_x => _x[x], value);
            }
        }

        public void SomeMethod(global::System.Int32 x)
        {
            this.Apply(_x => _x.SomeMethod(x));
        }

        public void SomeMethod(global::System.Int32 x, global::System.Int32 _x)
        {
            this.Apply(__x => __x.SomeMethod(x, _x));
        }

        public void SomeMethod(out global::System.Single f, global::System.Single _f)
        {
            global::System.Single __f;
            f = (this.GetOutParameterValue<global::System.Single>(x => x.SomeMethod(out __f, _f), 0));
            this.Apply(x => x.SomeMethod(out __f, _f));
        }
    }
}
