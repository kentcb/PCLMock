// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ICustomObservableMock<T> : global::PCLMock.MockBase<global::ICustomObservable<T>>, global::ICustomObservable<T>
    {
        public ICustomObservableMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Subscribe(global::PCLMock.It.IsAny<global::System.IObserver<T>>())).Return((global::System.IDisposable)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.IDisposable Subscribe(global::System.IObserver<T> observer)
        {
            return this.Apply(x => x.Subscribe(observer));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Reactive.Linq.Observable.Empty<global::System.Int32>());
            this.When(x => x.SomeOtherProperty).Return(global::System.Reactive.Linq.Observable.Empty<global::System.String>());
            this.When(x => x[global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>()]).Return(global::System.Reactive.Linq.Observable.Empty<global::System.Int32>());
            this.When(x => x.SomeMethod()).Return(global::System.Reactive.Linq.Observable.Return<global::System.Int32>((global::System.Int32)(default)));
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.String>(), global::PCLMock.It.IsAny<global::System.Int32>())).Return(global::System.Reactive.Linq.Observable.Return<global::System.String>((global::System.String)(default)));
            this.When(x => x.SomeCustomObservableMethod()).Return((global::ICustomObservable<global::System.Int32>)(default));
            this.When(x => x.SomeCustomObservableMethod(global::PCLMock.It.IsAny<global::System.String>(), global::PCLMock.It.IsAny<global::System.Int32>())).Return((global::ICustomObservable<global::System.String>)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.IObservable<global::System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.IObservable<global::System.String> SomeOtherProperty
        {
            get
            {
                return this.Apply(x => x.SomeOtherProperty);
            }
        }

        public global::System.IObservable<global::System.Int32> this[global::System.Int32 i, global::System.Single f]
        {
            get
            {
                return this.Apply(x => x[i, f]);
            }
        }

        public global::System.IObservable<global::System.Int32> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.IObservable<global::System.String> SomeMethod(global::System.String s, global::System.Int32 i)
        {
            return this.Apply(x => x.SomeMethod(s, i));
        }

        public global::System.IObservable<global::System.Int32> SomeGeneric1Method<T>()
        {
            return this.Apply(x => x.SomeGeneric1Method<T>());
        }

        public global::System.IObservable<global::System.Int32> SomeGeneric2Method<T1, T2>()
        {
            return this.Apply(x => x.SomeGeneric2Method<T1, T2>());
        }

        public global::ICustomObservable<global::System.Int32> SomeCustomObservableMethod()
        {
            return this.Apply(x => x.SomeCustomObservableMethod());
        }

        public global::ICustomObservable<global::System.String> SomeCustomObservableMethod(global::System.String s, global::System.Int32 i)
        {
            return this.Apply(x => x.SomeCustomObservableMethod(s, i));
        }
    }
}
