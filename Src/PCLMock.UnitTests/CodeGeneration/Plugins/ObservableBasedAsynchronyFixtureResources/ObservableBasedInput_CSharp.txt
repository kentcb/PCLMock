using System;

interface ICustomObservable<T> : IObservable<T>
{
}

interface ISomeInterface
{
	IObservable<int> SomeProperty
	{
		get;
	}

	IObservable<string> SomeOtherProperty
	{
		get;
	}

	// expecting this to be ignored because it's set-only
	IObservable<int> SomeSetOnlyProperty
	{
		set;
	}

	IObservable<int> this[int i, float f]
	{
		get;
	}

	IObservable<int> SomeMethod();
	IObservable<string> SomeMethod(string s, int i);

	// expecting these to be ignored because of the type parameters
	IObservable<int> SomeGeneric1Method<T>();
	IObservable<int> SomeGeneric2Method<T1, T2>();

	// expecting these two to be ignored because of it being a custom observable (which we have no way of providing a default value for)
	ICustomObservable<int> SomeCustomObservableMethod();
	ICustomObservable<string> SomeCustomObservableMethod(string s, int i);
}

namespace The.Namespace
{
	internal partial class ISomeInterfaceMock
	{
		public int SomeSetOnlyProperty
		{
			set {}
		}
	}
}