// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ICustomImmutableStackMock<T> : global::PCLMock.MockBase<global::ICustomImmutableStack<T>>, global::ICustomImmutableStack<T>
    {
        public ICustomImmutableStackMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Clear()).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
            this.When(x => x.Push(global::PCLMock.It.IsAny<T>())).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
            this.When(x => x.Pop()).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
            this.When(x => x.IsEmpty).Return((global::System.Boolean)(default));
            this.When(x => x.GetEnumerator()).Return((global::System.Collections.Generic.IEnumerator<T>)(default));
            this.When(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator()).Return((global::System.Collections.IEnumerator)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableStack<T> Clear()
        {
            return this.Apply(x => x.Clear());
        }

        public global::System.Collections.Immutable.IImmutableStack<T> Push(T value)
        {
            return this.Apply(x => x.Push(value));
        }

        public global::System.Collections.Immutable.IImmutableStack<T> Pop()
        {
            return this.Apply(x => x.Pop());
        }

        public T Peek()
        {
            return this.Apply(x => x.Peek());
        }

        public global::System.Boolean IsEmpty
        {
            get
            {
                return this.Apply(x => x.IsEmpty);
            }
        }

        public global::System.Collections.Generic.IEnumerator<T> GetEnumerator()
        {
            return this.Apply(x => x.GetEnumerator());
        }

        global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
        {
            return this.Apply(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator());
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableStack<global::System.Int32>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableStack<global::System.String>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(global::System.Collections.Immutable.ImmutableStack<global::System.String>.Empty);
            this.When(x => x.SomeCustomProperty).Return((global::ICustomImmutableStack<global::System.Int32>)(default));
            this.When(x => x.SomeOtherMethod()).Return((global::ICustomImmutableStack<global::System.String>)(default));
            this.When(x => x.SomeOtherMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return((global::ICustomImmutableStack<global::System.String>)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableStack<global::System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableStack<global::System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableStack<global::System.String> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Immutable.IImmutableStack<global::System.Int32> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Immutable.IImmutableStack<T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomImmutableStack<global::System.Int32> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomImmutableStack<global::System.String> SomeOtherMethod()
        {
            return this.Apply(x => x.SomeOtherMethod());
        }

        public global::ICustomImmutableStack<global::System.String> SomeOtherMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeOtherMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeGenericInterfaceMock<T> : global::PCLMock.MockBase<global::ISomeGenericInterface<T>>, global::ISomeGenericInterface<T>
    {
        public ISomeGenericInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
            this.When(x => x.SomeMethod()).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(global::System.Collections.Immutable.ImmutableStack<T>.Empty);
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Immutable.IImmutableStack<T> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Immutable.IImmutableStack<T> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Immutable.IImmutableStack<T> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
