// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ICustomSetMock<T> : global::PCLMock.MockBase<global::ICustomSet<T>>, global::ICustomSet<T>
    {
        public ICustomSetMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.Add(global::PCLMock.It.IsAny<T>())).Return((global::System.Boolean)(default));
            this.When(x => x.IsSubsetOf(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.IsSupersetOf(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.IsProperSupersetOf(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.IsProperSubsetOf(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.Overlaps(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.SetEquals(global::PCLMock.It.IsAny<global::System.Collections.Generic.IEnumerable<T>>())).Return((global::System.Boolean)(default));
            this.When(x => x.Contains(global::PCLMock.It.IsAny<T>())).Return((global::System.Boolean)(default));
            this.When(x => x.Remove(global::PCLMock.It.IsAny<T>())).Return((global::System.Boolean)(default));
            this.When(x => x.Count).Return((global::System.Int32)(default));
            this.When(x => x.IsReadOnly).Return((global::System.Boolean)(default));
            this.When(x => x.GetEnumerator()).Return((global::System.Collections.Generic.IEnumerator<T>)(default));
            this.When(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator()).Return((global::System.Collections.IEnumerator)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Boolean Add(T item)
        {
            return this.Apply(x => x.Add(item));
        }

        public void UnionWith(global::System.Collections.Generic.IEnumerable<T> other)
        {
            this.Apply(x => x.UnionWith(other));
        }

        public void IntersectWith(global::System.Collections.Generic.IEnumerable<T> other)
        {
            this.Apply(x => x.IntersectWith(other));
        }

        public void ExceptWith(global::System.Collections.Generic.IEnumerable<T> other)
        {
            this.Apply(x => x.ExceptWith(other));
        }

        public void SymmetricExceptWith(global::System.Collections.Generic.IEnumerable<T> other)
        {
            this.Apply(x => x.SymmetricExceptWith(other));
        }

        public global::System.Boolean IsSubsetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsSubsetOf(other));
        }

        public global::System.Boolean IsSupersetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsSupersetOf(other));
        }

        public global::System.Boolean IsProperSupersetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsProperSupersetOf(other));
        }

        public global::System.Boolean IsProperSubsetOf(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.IsProperSubsetOf(other));
        }

        public global::System.Boolean Overlaps(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.Overlaps(other));
        }

        public global::System.Boolean SetEquals(global::System.Collections.Generic.IEnumerable<T> other)
        {
            return this.Apply(x => x.SetEquals(other));
        }

        public void Add(T item)
        {
            this.Apply(x => x.Add(item));
        }

        public void Clear()
        {
            this.Apply(x => x.Clear());
        }

        public global::System.Boolean Contains(T item)
        {
            return this.Apply(x => x.Contains(item));
        }

        public void CopyTo(T[] array, global::System.Int32 arrayIndex)
        {
            this.Apply(x => x.CopyTo(array, arrayIndex));
        }

        public global::System.Boolean Remove(T item)
        {
            return this.Apply(x => x.Remove(item));
        }

        public global::System.Int32 Count
        {
            get
            {
                return this.Apply(x => x.Count);
            }
        }

        public global::System.Boolean IsReadOnly
        {
            get
            {
                return this.Apply(x => x.IsReadOnly);
            }
        }

        public global::System.Collections.Generic.IEnumerator<T> GetEnumerator()
        {
            return this.Apply(x => x.GetEnumerator());
        }

        global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
        {
            return this.Apply(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator());
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.HashSet<global::System.Int32>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.HashSet<global::System.String>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(new global::System.Collections.Generic.HashSet<global::System.String>());
            this.When(x => x.SomeCustomProperty).Return((global::ICustomSet<global::System.Int32>)(default));
            this.When(x => x.SomeOtherMethod()).Return((global::ICustomSet<global::System.String>)(default));
            this.When(x => x.SomeOtherMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return((global::ICustomSet<global::System.String>)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.ISet<global::System.Int32> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.ISet<global::System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.ISet<global::System.String> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Generic.ISet<global::System.Int32> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Generic.ISet<T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomSet<global::System.Int32> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomSet<global::System.String> SomeOtherMethod()
        {
            return this.Apply(x => x.SomeOtherMethod());
        }

        public global::ICustomSet<global::System.String> SomeOtherMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeOtherMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeGenericInterfaceMock<T> : global::PCLMock.MockBase<global::ISomeGenericInterface<T>>, global::ISomeGenericInterface<T>
    {
        public ISomeGenericInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.HashSet<T>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.HashSet<T>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(new global::System.Collections.Generic.HashSet<T>());
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.ISet<T> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.ISet<T> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.ISet<T> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
