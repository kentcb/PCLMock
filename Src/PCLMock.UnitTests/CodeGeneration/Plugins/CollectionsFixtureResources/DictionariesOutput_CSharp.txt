// -----------------------------------------------------------------------
// <autogenerated>
//    This code was generated from a template.
// 
//    Changes to this file may cause incorrect behaviour and will be lost
//    if the code is regenerated.
// </autogenerated>
// ------------------------------------------------------------------------
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ICustomDictionaryMock<TKey, TValue> : global::PCLMock.MockBase<global::ICustomDictionary<TKey, TValue>>, global::ICustomDictionary<TKey, TValue>
    {
        public ICustomDictionaryMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.ContainsKey(global::PCLMock.It.IsAny<TKey>())).Return((global::System.Boolean)(default));
            this.When(x => x.Remove(global::PCLMock.It.IsAny<TKey>())).Return((global::System.Boolean)(default));
            this.When(x => x.TryGetValue(global::PCLMock.It.IsAny<TKey>(), global::PCLMock.It.IsAny<TValue>())).Return((global::System.Boolean)(default));
            this.When(x => x.Keys).Return(new global::System.Collections.Generic.List<TKey>());
            this.When(x => x.Values).Return(new global::System.Collections.Generic.List<TValue>());
            this.When(x => x.Contains(global::PCLMock.It.IsAny<global::System.Collections.Generic.KeyValuePair<TKey, TValue>>())).Return((global::System.Boolean)(default));
            this.When(x => x.Remove(global::PCLMock.It.IsAny<global::System.Collections.Generic.KeyValuePair<TKey, TValue>>())).Return((global::System.Boolean)(default));
            this.When(x => x.Count).Return((global::System.Int32)(default));
            this.When(x => x.IsReadOnly).Return((global::System.Boolean)(default));
            this.When(x => x.GetEnumerator()).Return((global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<TKey, TValue>>)(default));
            this.When(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator()).Return((global::System.Collections.IEnumerator)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Boolean ContainsKey(TKey key)
        {
            return this.Apply(x => x.ContainsKey(key));
        }

        public void Add(TKey key, TValue value)
        {
            this.Apply(x => x.Add(key, value));
        }

        public global::System.Boolean Remove(TKey key)
        {
            return this.Apply(x => x.Remove(key));
        }

        public global::System.Boolean TryGetValue(TKey key, out TValue value)
        {
            TValue _value;
            value = (this.GetOutParameterValue<TValue>(x => x.TryGetValue(key, out _value), 1));
            return this.Apply(x => x.TryGetValue(key, out _value));
        }

        public TValue this[TKey key]
        {
            get
            {
                return this.Apply(x => x[key]);
            }

            set
            {
                this.ApplyPropertySet(x => x[key], value);
            }
        }

        public global::System.Collections.Generic.ICollection<TKey> Keys
        {
            get
            {
                return this.Apply(x => x.Keys);
            }
        }

        public global::System.Collections.Generic.ICollection<TValue> Values
        {
            get
            {
                return this.Apply(x => x.Values);
            }
        }

        public void Add(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            this.Apply(x => x.Add(item));
        }

        public void Clear()
        {
            this.Apply(x => x.Clear());
        }

        public global::System.Boolean Contains(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            return this.Apply(x => x.Contains(item));
        }

        public void CopyTo(global::System.Collections.Generic.KeyValuePair<TKey, TValue>[] array, global::System.Int32 arrayIndex)
        {
            this.Apply(x => x.CopyTo(array, arrayIndex));
        }

        public global::System.Boolean Remove(global::System.Collections.Generic.KeyValuePair<TKey, TValue> item)
        {
            return this.Apply(x => x.Remove(item));
        }

        public global::System.Int32 Count
        {
            get
            {
                return this.Apply(x => x.Count);
            }
        }

        public global::System.Boolean IsReadOnly
        {
            get
            {
                return this.Apply(x => x.IsReadOnly);
            }
        }

        public global::System.Collections.Generic.IEnumerator<global::System.Collections.Generic.KeyValuePair<TKey, TValue>> GetEnumerator()
        {
            return this.Apply(x => x.GetEnumerator());
        }

        global::System.Collections.IEnumerator global::System.Collections.IEnumerable.GetEnumerator()
        {
            return this.Apply(x => ((global::System.Collections.IEnumerable)(x)).GetEnumerator());
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeInterfaceMock : global::PCLMock.MockBase<global::ISomeInterface>, global::ISomeInterface
    {
        public ISomeInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>());
            this.When(x => x.SomeReadOnlyProperty).Return(new global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(new global::System.Collections.Generic.Dictionary<global::System.Int32, global::System.String>());
            this.When(x => x.SomeCustomProperty).Return((global::ICustomDictionary<global::System.Int32, global::System.String>)(default));
            this.When(x => x.SomeOtherMethod()).Return((global::ICustomDictionary<global::System.Int32, global::System.String>)(default));
            this.When(x => x.SomeOtherMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return((global::ICustomDictionary<global::System.Int32, global::System.String>)(default));
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IDictionary<global::System.Int32, global::System.String> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.IReadOnlyDictionary<global::System.Int32, global::System.String> SomeReadOnlyProperty
        {
            get
            {
                return this.Apply(x => x.SomeReadOnlyProperty);
            }
        }

        public global::System.Collections.Generic.IDictionary<global::System.Int32, global::System.String> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.IDictionary<global::System.Int32, global::System.String> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }

        public global::System.Collections.Generic.IDictionary<global::System.Int32, global::System.String> SomeGenericMethod<T>()
        {
            return this.Apply(x => x.SomeGenericMethod<T>());
        }

        public global::System.Collections.Generic.IDictionary<global::System.Int32, T> SomeOtherGenericMethod<T>()
        {
            return this.Apply(x => x.SomeOtherGenericMethod<T>());
        }

        public global::ICustomDictionary<global::System.Int32, global::System.String> SomeCustomProperty
        {
            get
            {
                return this.Apply(x => x.SomeCustomProperty);
            }
        }

        public global::ICustomDictionary<global::System.Int32, global::System.String> SomeOtherMethod()
        {
            return this.Apply(x => x.SomeOtherMethod());
        }

        public global::ICustomDictionary<global::System.Int32, global::System.String> SomeOtherMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeOtherMethod(i, f));
        }
    }
}
namespace The.Namespace
{
    [System.CodeDom.Compiler.GeneratedCode("PCLMock", "$VERSION$")]
    [System.Runtime.CompilerServices.CompilerGenerated]
    internal partial class ISomeGenericInterfaceMock<TKey, TValue> : global::PCLMock.MockBase<global::ISomeGenericInterface<TKey, TValue>>, global::ISomeGenericInterface<TKey, TValue>
    {
        public ISomeGenericInterfaceMock(global::PCLMock.MockBehavior behavior = global::PCLMock.MockBehavior.Strict): base(behavior)
        {
            ConfigureBehaviorGenerated();
            ConfigureBehavior();
            if ((behavior) == (global::PCLMock.MockBehavior.Loose))
            {
                ConfigureLooseBehavior();
            }
        }

        private void ConfigureBehaviorGenerated()
        {
            this.When(x => x.SomeProperty).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
            this.When(x => x.SomeMethod()).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
            this.When(x => x.SomeMethod(global::PCLMock.It.IsAny<global::System.Int32>(), global::PCLMock.It.IsAny<global::System.Single>())).Return(new global::System.Collections.Generic.Dictionary<TKey, TValue>());
        }

        partial void ConfigureBehavior();
        partial void ConfigureLooseBehavior();
        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeProperty
        {
            get
            {
                return this.Apply(x => x.SomeProperty);
            }
        }

        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeMethod()
        {
            return this.Apply(x => x.SomeMethod());
        }

        public global::System.Collections.Generic.IDictionary<TKey, TValue> SomeMethod(global::System.Int32 i, global::System.Single f)
        {
            return this.Apply(x => x.SomeMethod(i, f));
        }
    }
}
